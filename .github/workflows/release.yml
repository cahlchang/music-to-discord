name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag' && startsWith(github.ref_name, 'v')
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

  build:
    name: Build Go binaries
    needs: release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            cgo: 1
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            cgo: 0
          - os: windows-latest
            goos: windows
            goarch: amd64
            cgo: 0
          - os: macos-latest
            goos: darwin
            goarch: amd64
            cgo: 1
          - os: macos-latest
            goos: darwin
            goarch: arm64
            cgo: 1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Install dependencies (Ubuntu)
        if: matrix.goos == 'linux' && matrix.cgo == 1
        run: |
          sudo apt-get update
          sudo apt-get install -y libopus-dev

      - name: Install dependencies (macOS)
        if: matrix.goos == 'darwin' && matrix.cgo == 1
        run: |
          brew install opus

      # Skip Windows CGO build for now due to complexity
      # Windows users should compile from source

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: ${{ matrix.cgo }}
        run: |
          cd go-client
          output_name=trunecord-${{ matrix.goos }}-${{ matrix.goarch }}
          if [ "${{ matrix.cgo }}" = "0" ]; then
            output_name="${output_name}-nocgo"
          fi
          if [ "${{ matrix.goos }}" = "windows" ]; then
            output_name="${output_name}.exe"
          fi
          go build -o dist/${output_name} ./cmd/

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./go-client/dist/trunecord-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.cgo == 0 && '-nocgo' || '' }}${{ matrix.goos == 'windows' && '.exe' || '' }}
          asset_name: trunecord-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.cgo == 0 && '-nocgo' || '' }}${{ matrix.goos == 'windows' && '.exe' || '' }}
          asset_content_type: application/octet-stream